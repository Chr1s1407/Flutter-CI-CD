name: Continuous Practice Pipeline for Flutter

on:
  push:
    branches:
      - release_app2

env:
  APP_NAME: app2
  CACHE_FLUTTER: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: $env.CACHE_FLUTTER
      - run: flutter --version

      - name: Clean Project
        run: flutter clean

      - name: Install Packages and Dependencies
        run: flutter pub get

      - name: Analyze Dart Code
        run: flutter analyze lib test

      - name: Run Tests Including Coverage
        run: flutter test --no-pub --coverage test

  build-android:
    if: true
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: $env.CACHE_FLUTTER
      - run: flutter --version

      - name: Decrypt Android Keys
        run: sh ./.github/scripts/decrypt_android.sh
        env:
          ANDROID_KEYS_ZIP_PASSPHRASE: ${{ secrets.ANDROID_KEYS_ZIP_PASSPHRASE }}

      - name: Install Packages and Dependencies
        run: flutter pub get

      - name: Build Android Appbundle
        run: flutter build appbundle --flavor ${{ env.APP_NAME }} --release --no-pub

      - name: Archive Android Production Artifact
        uses: actions/upload-artifact@master
        with:
            name: android
            path: build/app/outputs/bundle/${{ env.APP_NAME }}Release/app-${{ env.APP_NAME }}-release.aab

      - name: Deploy to Play Store
        id: deploy
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: ./android/service_account_key.json
          packageName: ${{ secrets.ANDROID_PACKAGE_NAME}}.${{ env.APP_NAME }}
          releaseFiles: build/app/outputs/bundle/${{ env.APP_NAME }}Release/app-${{ env.APP_NAME }}-release.aab
          track: internal
          status: draft

# TODO:
  build-ios:
    if: false
    needs: [test]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: $env.CACHE_FLUTTER
      - run: flutter --version

      - name: Install Packages / Dependencies
        run: flutter pub get

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_P12 }}
          P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_MOBILEPROVISION }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS App
        if: ${{ env.BUILD_IOS == 'true'}}
        run: |
            flutter build ios --flavor ${{ env.APP_NAME }}
            cd build/ios/iphoneos
            mkdir Payload
            cd Payload
            ln -s ../Runner.app
            cd ..
            zip -r app.ipa Payload

      - name: Archive iOS Production Artifact
        if: ${{ env.BUILD_IOS == 'true'}}
        uses: actions/upload-artifact@master
        with:
          name: ios
          path: build/ios/iphoneos/app.ipa

      - name: 'Deploy: Upload app to TestFlight'
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: build/ios/iphoneos/app.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
